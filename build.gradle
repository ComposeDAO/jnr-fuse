plugins {
    id 'java-library'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'net.researchgate.release' version '3.0.2'
    id 'io.github.gradle-nexus.publish-plugin' version '1.2.0'
    id 'maven-publish'
    id 'signing'
    id 'com.google.protobuf' version '0.9.4'
}

protobuf {
  protoc {
    artifact = "com.google.protobuf:protoc:3.22.3"
  }
  plugins {
    grpc {
      artifact = 'io.grpc:protoc-gen-grpc-java:1.60.0'
    }
  }
  generateProtoTasks {
    all()*.plugins {
      grpc {}
    }
  }
}

// sourceSets {
//   main {
//     proto {
//       // In addition to the default 'src/main/proto'
//       srcDir '../f1r3fly/models/src/main/protobuf'
//       srcDir '../f1r3fly/models/target/protobuf_external'
//     }
//   }
// }

repositories {
    jcenter()
}

java {
    withSourcesJar()
    withJavadocJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

shadowJar {
    archiveClassifier = 'shadow'
    relocate 'org.objectweb.asm', 'org.objectweb.asm.shaded'
}

tasks.withType(Javadoc).configureEach {
    options.addStringOption('Xdoclint:none', '-quiet')
}

dependencies {
    implementation 'com.google.gson:gson:2.8.9'
    api 'com.github.jnr:jnr-ffi:2.2.13'
    api 'com.github.jnr:jnr-posix:3.1.16'
    api 'com.github.jnr:jnr-constants:0.10.4'

    implementation 'com.google.code.gson:gson:2.8.6'

    // runtimeOnly 'io.grpc:grpc-netty-shaded:1.60.0'
    // implementation 'io.grpc:grpc-protobuf:1.60.0'
    // implementation 'io.grpc:grpc-stub:1.60.0'

    // // gRPC dependencies
    //  implementation 'io.grpc:grpc-netty:1.60.0' // Use the latest version available
    //  implementation 'io.grpc:grpc-protobuf:1.60.0' // Use the latest version available
    //  implementation 'io.grpc:grpc-stub:1.60.0' // Use the latest version available
    //  implementation 'io.grpc:grpc-services:1.60.0' // Use the latest version available

    //  // Required for the protobuf plugin
    //  implementation 'com.google.protobuf:protobuf-java:3.15.8' // Use the latest version available
    //  implementation 'com.google.protobuf:protobuf-java-util:3.15.8' // Use the latest version available

    testImplementation 'junit:junit:4.13.2'
}

release {
    newVersionCommitMessage = '[jnr-fuse release] - '
    preTagCommitMessage = '[jnr-fuse release] - pre tag commit: '
    buildTasks = ['clean', 'assemble', 'publishToSonatype', 'closeAndReleaseSonatypeStagingRepository']
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'jnr-fuse'
            from components.java

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'jnr-fuse'
                description = 'jnr-fuse is a FUSE implementation in java using Java Native Runtime (JNR).'
                url = 'https://github.com/SerCeMan/jnr-fuse'
                licenses {
                    license {
                        name = 'The MIT License (MIT)'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        id = 'SerCe'
                        name = 'Sergey Tselovalnikov'
                        email = 'sergeicelov@gmail.com'
                    }
                }

                scm {
                    url = 'https://github.com/SerCeMan/jnr-fuse'
                    connection = 'scm:git:git@github.com:SerCeMan/jnr-fuse.git'
                    developerConnection = 'scm:git:git@github.com:SerCeMan/jnr-fuse.git'
                }
            }
        }
    }

    repositories {
        maven {
            // A test repository in the build repository
            // allowing easy verification of published artifacts
            name = 'projectLocal'
            url = file("${buildDir}/repo")
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            username.set(providers.environmentVariable("SONATYPE_LOGIN").forUseAtConfigurationTime())
            password.set(providers.environmentVariable("SONATYPE_PASSWORD").forUseAtConfigurationTime())
        }
    }
}

signing {
    sign publishing.publications.mavenJava
    setRequired {
        gradle.taskGraph.allTasks.any {
            it.name == 'publishToSonatype'
        }
    }
}
